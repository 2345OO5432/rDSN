
;
; progressive system complexity for performance tuning:
;
;  . single thread for both client and server, workload concurrency set to 1, use emulated network to avoid network cost (delay set to 0) 
;  . + concurrency
;  . + native network 
;  . + multi-threaded server/client 
;
; the similar approach can be applied for correctness debugging
;

[config.args]
;; defined in app config file
;; service_type = <service-type>

service_type = simple_kv

[modules]
dsn.app.simple_kv
dsn.tools.common
dsn.tools.emulator

[apps..default]

;network.client.RPC_CHANNEL_TCP = dsn::tools::asio_network_provider, 65536 
network.client.RPC_CHANNEL_TCP = dsn::tools::sim_network_provider, 65536 
network.client.RPC_CHANNEL_UDP = dsn::tools::sim_network_provider, 65536 

;network.server.0.RPC_CHANNEL_TCP = dsn::tools::asio_network_provider, 65536 
; 0 for any server port 
network.server.0.RPC_CHANNEL_TCP = dsn::tools::sim_network_provider, 65536 
network.server.0.RPC_CHANNEL_UDP = dsn::tools::sim_network_provider, 65536 

[apps.server]
type = %service_type%
ports = 54333
pools = THREAD_POOL_DEFAULT

[apps.client.perf]
type = %service_type%.client.perf
arguments = localhost:54333
pools = THREAD_POOL_DEFAULT

[simple_kv.simple_kv.perf-test.case.1]
perf_test_seconds  = 20
perf_test_key_space_size = 100000
perf_test_concurrency = 1
perf_test_payload_bytes = 10
perf_test_timeouts_ms = 10000
perf_test_hybrid_request_ratio = 1,1,1,

[core]
tool = nativerun
;tool = emulator
;toollets = profiler
;toollets = tracer,profiler,fault_injector

[tools.emulator]
min_message_delay_microseconds = 0
max_message_delay_microseconds = 0

[task.LPC_AIO_IMMEDIATE_CALLBACK]
is_trace = false
is_profile = false
allow_inline = false
disk_write_fail_ratio = 0.0

[task.LPC_RPC_TIMEOUT]
is_trace = false

[threadpool.THREAD_POOL_DEFAULT]
worker_count = 1 
